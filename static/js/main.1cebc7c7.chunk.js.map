{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","countPage","Math","ceil","pagination","Array","from","length","_","i","map","className","cn","active","href","onClick","CanMovePrevPage","CanMoveNextPage","disabled","items","to","numbers","n","push","getNumbers","App","useState","setPerPage","setCurrentPage","start","end","id","value","onChange","event","target","htmlFor","slice","item","ReactDOM","render","document","getElementById"],"mappings":"oNAUaA,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAYC,KAAKC,KAAKN,EAAQC,GAG9BM,EAFQC,MAAMC,KAAK,CAAEC,OAAQN,IAAa,SAACO,EAAGC,GAAJ,OAAUA,EAAI,KAErCC,KAAI,SAACD,GAAD,OAC3B,oBACEE,UAAWC,IACT,YACA,CAAEC,OAAQJ,IAAMV,IAHpB,SAOE,mBACE,UAAQ,WACRY,UAAU,YACVG,KAAI,WAAML,GACVM,QAAS,kBAAMf,EAAaS,IAJ9B,SAMGA,KAREA,MAaHO,EAAkBjB,EAAc,EAChCkB,EAAkBhB,EAAYF,EAcpC,OACE,qBAAIY,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEM,UAAWF,IAFf,SAKE,mBACE,UAAQ,WACRL,UAAU,YACVG,KAAK,QACL,iBAAgBE,EAChBD,QAlBS,WACXC,GACFhB,EAAaD,EAAc,IAWzB,oBAWDK,EAED,oBAAIO,UAAWC,IACb,YACA,CAAEM,UAAWD,IAFf,SAKE,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAK,QACL,iBAAgBG,EAChBF,QA1CS,WACXE,GACFjB,EAAaD,EAAc,IAmCzB,wBCxEFoB,ECNC,SAAoBb,EAAcc,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIhB,EAAMgB,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDDKG,CAAW,EAAG,IACzBd,KAAI,SAAAY,GAAC,qBAAYA,MAEPG,EAAgB,WAC3B,IAAM5B,EAAQsB,EAAMZ,OACpB,EAA8BmB,mBAAS,GAAvC,mBAAO5B,EAAP,KAAgB6B,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAO3B,EAAP,KAAoB6B,EAApB,KAEMC,GAAS9B,EAAc,GAAKD,EAC5BgC,EAAMD,EAAQ/B,EAAUD,EAAQA,EAAQgC,EAAQ/B,EAEtD,OACE,sBAAKa,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWZ,EADX,mBACiC8B,EAAQ,EADzC,cACgDC,EADhD,eAC0DjC,EAD1D,OAIA,sBAAKc,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRoB,GAAG,kBACHpB,UAAU,eACVqB,MAAOlC,EACPmC,SAAU,SAACC,GACTP,GAAYO,EAAMC,OAAOH,OACzBJ,EAAe,IAPnB,UAUE,wBAAQI,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkBzB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEd,MAAOA,EACPC,QAASA,EACTC,YAAaA,EACbC,aAAc4B,IAEhB,6BACGT,EACEkB,MAAMR,EAAOC,GACbpB,KAAI,SAAA4B,GAAI,OAAI,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YEvDhCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1cebc7c7.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (id: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const countPage = Math.ceil(total / perPage);\n  const pages = Array.from({ length: countPage }, (_, i) => i + 1);\n\n  const pagination = pages.map((i) => (\n    <li\n      className={cn(\n        'page-item',\n        { active: i === currentPage },\n      )}\n      key={i}\n    >\n      <a\n        data-cy=\"pageLink\"\n        className=\"page-link\"\n        href={`#${i}`}\n        onClick={() => onPageChange(i)}\n      >\n        {i}\n      </a>\n    </li>\n  ));\n\n  const CanMovePrevPage = currentPage > 1;\n  const CanMoveNextPage = countPage > currentPage;\n\n  const nextPage = () => {\n    if (CanMoveNextPage) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  const prevPage = () => {\n    if (CanMovePrevPage) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={cn(\n        'page-item',\n        { disabled: !CanMovePrevPage },\n      )}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={!CanMovePrevPage}\n          onClick={prevPage}\n        >\n          «\n        </a>\n      </li>\n\n      {pagination}\n\n      <li className={cn(\n        'page-item',\n        { disabled: !CanMoveNextPage },\n      )}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={!CanMoveNextPage}\n          onClick={nextPage}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const total = items.length;\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const start = (currentPage - 1) * perPage;\n  const end = start + perPage > total ? total : start + perPage;\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${start + 1} - ${end} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(event) => {\n              setPerPage(+event.target.value);\n              setCurrentPage(1);\n            }}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n      <ul>\n        {items\n          .slice(start, end)\n          .map(item => <li key={item} data-cy=\"item\">{item}</li>)}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}